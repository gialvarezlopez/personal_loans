{% extends 'app/base.html.twig' %}

{% block title_page %}
     {% trans %}payment_rata_title{% endtrans %} - {% trans %}app_name{% endtrans %}
{% endblock %}

{% block breadcrumb %}
    {# {{ include('EmrBundle:consulta:_breadcrumb.html.twig' )  }} #}
{% endblock %}

{% block submenutop %}
    {# {{ include('EmrBundle:consulta:_submenu.html.twig' )  }} #}
{% endblock %}


{#
{% block header %}
        <h1>Clients list</h1><hr>
{% endblock %}
#}

{% block content %}

<style>
.modal-body {
    max-height: calc(100vh - 200px);
    overflow-y: auto;
}

.splitPayment{
    padding-left:20px;
}

.amounts{
    font-size:13px;
    font-weight: 600;
    color: #34825F;
}

.loanIncompleted {
    color:red;
    font-size:20px;
    font-weight: 700;
}
.loanCompleted {
    color:green;
    font-size:20px;
    font-weight: 700;
}

.widthAuto {
   width: auto !important;
}

.datepicker:read-only{
    background-color:white;
    /*cursor:not-allowed;*/
} 

#holderPaymentDetail, #holderPaymentDetail_additional{
    display:none;
}

.control-label{
    font-weight: 550!important
}

.tab-pane {

    border-left: 1px solid #ddd;
    border-right: 1px solid #ddd;
    border-bottom: 1px solid #ddd;
    border-radius: 0px 0px 5px 5px;
    padding: 10px;
}

.nav-tabs {
    margin-bottom: 0;
}

.tab-content{
    background: #fff;
}

.selectedBalance{
    background-color: #fff;
}

.tabInitBalance, .tabAdditional{
    padding: 12px !important;
}
.control-label, th, #tablePayments td, .widthAuto td{
    font-weight: 550!important;
    font-size: 13px;
}
.infoAlert{
    font-size: 13px;
}
</style>

{#  Check the notifications #}
{% set created = 0 %}
{% for message in app.session.flashbag().get("success") %}
    <div class="alert alert-success"><i class="fa fa-check-circle-o" aria-hidden="true"></i> {{message}}</div>
{% endfor %}
{% for message in app.session.flashbag().get("error") %}
    <div class="alert alert-danger"><i class="fa fa-times" aria-hidden="true"></i> {{message}} </div>
{% endfor %}
{# End notifications #}

<section class="content-header">
      <h1>
       {% trans %}payment_rata_title{% endtrans %}
        <small></small>
      </h1>
      <ol class="breadcrumb">
        <li><a href="{{ path('dashboard_index') }}"><i class="fa fa-dashboard"></i> Dashboard</a></li>
        <li><a href="{{ path('loan_index') }}">{% trans %}menu_left_loans{% endtrans %}</a></li>
        <li><a href="{{ path('loanpayment_quotasHistory') }}?loaId={{loan.loaId}}">{% trans %}menu_left_history{% endtrans %}</a></li>
      </ol>
</section>
<hr>
<div class="box">
    <div class="box-header">
        <div class="row">
            <div class="col-lg-12 col-md-12 col-sm-12"> 
                <div class="box-titlex text-center">
                    {#
                    {% if loan.loaCompleted == 1 %}
                        <div class="loanCompleted"><i class="fa fa-check-circle" aria-hidden="true"></i> Loan Finished</div>
                    {% elseif loan.loaCompleted == 2 %}
                        <div class="box-titlex text-center"><span class="loanIncompleted"><i class="fa fa-exclamation-triangle" aria-hidden="true"></i> Loan Freezed</span></div>
                    {% endif %}
                    #}

                    {% if loan.loaCompleted == 1 %}
                    <span class="loanCompleted">
                        <i class="fa fa-check-circle" aria-hidden="true"></i> 
                        {% trans %}general_msg_status_loan_finished{% endtrans %}
                    </span>
                    {% elseif loan.loaCompleted == 2 %}
                        <span class="loanIncompleted"><i class="fa fa-exclamation-triangle" aria-hidden="true"></i> {% trans %}general_msg_status_loan_freezed{% endtrans %}</span>

                    {% endif %}
                </div>
            </div>
            
        </div>
    </div>
    <div class="box-body">
        {#
        {{ form_start(form) }}
            {{ form_widget(form) }}
            <input type="submit" value="Create" />
        {{ form_end(form) }}
        #}
        <div class="well ">
            <div class="row">
                <div class="col-lg-4">
                    <i class="fa fa-user-circle-o" aria-hidden="true"></i> 
                    <span>
                        <a href="{{ loan.cli.cliId }}" class="btnShowClient">
                            {{ loan.cli.cliFirstName ~" "~ loan.cli.cliMiddleName ~" "~ loan.cli.cliFirstSurname ~" "~ loan.cli.cliSecondSurname }}
                        </a>
                        {# {{ client.cliFirstName ~" "~ client.cliMiddleName ~" "~ client.cliFirstSurname ~" "~ client.cliSecondSurname }} #}
                    </span>
                </div>
                <div class="col-lg-4">
                    <i class="fa fa-barcode" aria-hidden="true"></i> {% trans %}loan_edit_code{% endtrans %}: <a href="{{ path('loan_show', { 'loaId': loan.loaId }) }}"> {{ loan.loaCode }} </a> 
                </div>
                <div class="col-lg-4">    
                    <i class="fa fa-money" aria-hidden="true"></i> {% trans %}loan_form_requested_amount{% endtrans %}: 
                        <b class="amounts">
                            <i class="fa fa-usd" aria-hidden="true"></i> 
                            {{ loan.loaAmount|number_format(2, '.', ',') }}
                            {% set additionalAmounts = srv_Loans.getTotalAdditionalAmounts(loan.loaId) %}
                            {% if additionalAmounts > 0 %}
                                +  {{ additionalAmounts|number_format(2, '.', ',') }}
                            {% endif %}
                        </b>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12"><i class="fa fa-sticky-note-o" aria-hidden="true"></i> {% trans %}reports_table_title_note{% endtrans %}: {% if loan.loaDescription %}{{loan.loaDescription}}{% else %}N/A{% endif %}</div>
        </div>
        <hr>
        {% set rate = 0 %}
        {{form_start(form,{'enctype':'multipart/form-date'})}}
            <div class="row">
                <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
                    {% set IsOverDueDate = 0 %}
                    {% if loan.loaCompleted == 0 %}
                        {% set pending =  srv_Loans.checkDeadLineToPay( loan.loaRateInterest, loan.loaRateInterestByDefault, loan.loaRecurringDayPayment, loan.loaNextPaymentDate|date('Y-m-d'), srv_TimeZone.getNameTimeZone() ) %}
                        {# {% set rate = pending.rate  %} #}
                        {% if pending %}
                            {% set rate = pending.rate  %}
                            {% set quotas = pending.quotas %}
                            {% set IsOverDueDate = 1 %}
                        {% else %}
                            {% set rate = loan.loaRateInterest %} {# here -------------------------------- #}
                            {% set quotas = "" %}
                        {% endif %}
                    {% else %}
                        {% set rate = loan.loaRateInterestByDefault  %}
                        {% set quotas = "" %}
                        
                    {% endif %}
                    
                        
                    <div class="well">
                        <div class="row">
                            
                            <div class="col-md-12 col-lg-6 col-sm-12">
                                <div class="form-group">
                                    <div class="form_error">{{ form_errors(form.lpaMaxPaymentDate)}}</div>
                                    <label for="" class=" control-label">{% trans %}payment_rata_payment_deadline{% endtrans %}: <span class="text-danger">*</span></label>
                                    <div class="input-group">
                                        <div class="input-group-addon">
                                            <i class="fa fa-calendar"></i>
                                        </div>
                                        <div class="">{{ form_widget(form.lpaMaxPaymentDate,  { 'attr': {'class': 'form-control', "autocomplete":"off", "value":loan.loaDeadline|date('Y-m-d'), "readonly":"true" } } ) }}</div>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-12 col-lg-6 col-sm-12">
                                <div class="form-group">
                                    <div class="form_error">{{ form_errors(form.lpaPaidDate)}}</div>
                                    <label for="" class=" control-label">{% trans %}payment_rata_when_was_it_paid{% endtrans %}: <span class="text-danger">*</span></label>
                                    <div class="input-group">
                                        <div class="input-group-addon">
                                            <i class="fa fa-calendar"></i>
                                        </div>
                                        <div class="">{{ form_widget(form.lpaPaidDate,  { 'attr': {'class': 'form-control datepicker', "autocomplete":"off" } } ) }}</div>
                                    </div>
                                </div>
                            </div>
                            
                            {# additional amounts ===================================================================================== #}
                            
                            {% set hasBalance = srv_Loans.hasCurrentAdditionalAmount(loan.loaId) %}
                            
                            {% if hasBalance %}
                                
                                {% set loanAdd_Id = hasBalance[0]["laa_id"] %}
                                {% set loanAdd_loaRateInterest = hasBalance[0]["laa_rate_interest"] %}
                                {% set loandAdd_laaRateInterestByDefault = hasBalance[0]["laa_rate_interest_by_default"] %}
                                {% set loandAdd_completed = hasBalance[0]["laa_completed"] %}
                                {% set loandAdd_nextPaymentDate = hasBalance[0]["laa_next_payment_date"] %}
                                {% set loandAdd_splitted_balance = hasBalance[0]["laa_splitted_balance"] %}

                                

                                {% set IsOverDueDate_add = 0 %}
                                {% if loandAdd_completed == 0 %}
                                    {% set pending_add =  srv_Loans.checkDeadLineToPay( loanAdd_loaRateInterest, loandAdd_laaRateInterestByDefault, loan.loaRecurringDayPayment, loandAdd_nextPaymentDate, srv_TimeZone.getNameTimeZone() ) %}
                                    
                                    {% if pending_add %}
                                        {% set rate_add = pending_add.rate  %}
                                        {% set quotas_add = pending_add.quotas %}
                                        {% set IsOverDueDate_add = 1 %}
                                    {% else %}
                                        {% set rate_add = loanAdd_loaRateInterest  %}
                                        {% set quotas_add = "" %}
                                    {% endif %}
                                {% else %}
                                    {% set rate_add = loandAdd_laaRateInterestByDefault  %}
                                    {% set quotas_add = "" %}
                                                
                                {% endif %}

                                {% set arrPendingAmount_add = srv_Loans.getPendingAmount(loanAdd_Id, true) %}
                                {% set pendingPaid_add = arrPendingAmount_add[0]["pending"] %}
                                {#
                                {% if pendingPaid_add == 0 %}
                                    {% set arrPendingAmount_add = srv_Loans.getAdditionalAmountById(loanAdd_Id) %}
                                    {% set pendingPaid_add = arrPendingAmount_add[0]["laa_amount"] %}
                                {% endif %}
                                #}

                                
                            {% endif %}
                            {# end additional amounts ===================================================================================== #}

                            

                            {% if hasBalance is defined and hasBalance|length > 0 %}
                                
                            {% else %}

                            {% endif %}

                            <div class="col-md-12 col-lg-12 col-sm-12">
                                <hr>
                                {% set payments = srv_Loans.checkPaymentsPerLoan(loan.loaId) %}

                                
                                <div class="row">
                                    <div class="col-lg-12">
                                        <span>{% trans %}payment_rata_already_paid{% endtrans %} : <span class="amounts" id="alreadyPaidAmount"><i class="fa fa-usd" aria-hidden="true"></i>{{ payments[0].paidCapital|number_format(2, '.', ',') }}</span></span>
                                    </div>
                                </div>  
                                {% set exsistAmountsJoined = false %}
                                {% if loan.loaCompleted == 0 %}  
                                    <div class="row" style="margin-top:10px">    
                                        
                                        <div class="col-lg-12">
                                            
                                            {% set arrPendingAmount = srv_Loans.getPendingAmount(loan.loaId, false) %}
                                            {% set pendingPaid = arrPendingAmount[0]["pending"] %} <!-- monto total sin intereses -->

                                            
                                            
                                            {# {% set additionalAmounts = srv_Loans.getTotalAdditionalAmounts(loan.loaId) %} #}

                                            {{ include("app/loanpayment/_table_balances.html.twig",{"foo":""}) }}
                                            <!-- Inicio de tablas de balances############ -->
                                            {% set Balance1 = 0.00 %}
                                            {% set Balance2 = 0.00 %} 
                                            {% set SumBalance1Balance2 = 0.00 %} 
                                            
                                            <div class="row">
                                                {% if (rate_add is defined and rate != rate_add) or ( loandAdd_splitted_balance is defined and loandAdd_splitted_balance == 1) %} {# ==== condition =================================== #}
                                                    <div class="col-lg-6">
                                                        {# {% trans %}payment_rata_current_balance{% endtrans %}:<br> #}
                                                        Balance 1 (Inicial):<br>
                                                        <div class="well tabInitBalance selectedBalance">
                                                            {% set pendingPaid = pendingPaid + srv_Loans.getTotalAdditionalAmountsJoinedMainBalance(loan.loaId) %}
                                                            <table>
                                                                <tr>
                                                                    <td>
                                                                        <span class="amounts">
                                                                            <i class="fa fa-usd" aria-hidden="true"></i>
                                                                            <span  id="pendingAmount" class="pendingAmount">{{ pendingPaid|number_format(2, '.', ',') }}</span>
                                                                            x <span class="amounts"><span id="htmlRate">{{rate}}</span>% </span> 
                                                                                                                    
                                                                            = 
                                                                        </span>
                                                                    </td>
                                                                    <td> &#160; <span class="amounts"><i class="fa fa-usd" aria-hidden="true"></i><span id="htmlJustRate">{{ ((rate/100)*pendingPaid)|number_format(2, '.', ',') }}</span> </div></td>        
                                                                </tr>
                                                                <tr>
                                                                    <td><div class="text-right amounts"> + </div></td>
                                                                    <td><span class="amounts">&#160; <i class="fa fa-usd" aria-hidden="true"></i><span  id="pendingAmount" class="pendingAmount">{{ pendingPaid|number_format(2, '.', ',') }}</span></span></td>        
                                                                </tr>
                                                                <tr>
                                                                    <td><div class="text-right amounts">Total = </div></td>
                                                                    <td>
                                                                        <span class="amounts">
                                                                            &#160; <i class="fa fa-usd" aria-hidden="true"></i>
                                                                            <span id="boxHtmlTotalAmount" class="">{{ (pendingPaid + (rate/100)*pendingPaid)|number_format(2, '.', ',') }}</span>
                                                                            {% set Balance1 = (pendingPaid + (rate/100)*pendingPaid) %}
                                                                        </span>
                                                                    </td>        
                                                                </tr>    
                                                            </table>
                                                        </div>
                                                    </div>
                                                    {% if hasBalance is defined and hasBalance|length > 0 %}
                                                        <div class="col-lg-6">
                                                            Balance 2 (Adicional):<br>
                                                            <div class="well tabAdditional ">
                                                                <table>
                                                                    <tr>
                                                                        <td>
                                                                            <span class="amounts">
                                                                                <i class="fa fa-usd" aria-hidden="true"></i>
                                                                                <span  id="pendingAmount_additional" class="pendingAmount">{{ pendingPaid_add|number_format(2, '.', ',') }}</span>
                                                                                x <span class="amounts"><span id="htmlRate_additional">{{rate_add}}</span>% </span> 
                                                                                                                        
                                                                                = 
                                                                            </span>
                                                                        </td>
                                                                        <td> &#160; <span class="amounts"><i class="fa fa-usd" aria-hidden="true"></i><span id="htmlJustRate_additional">{{ ((rate_add/100)*pendingPaid_add)|number_format(2, '.', ',') }}</span> </div></td>        
                                                                    </tr>
                                                                    <tr>
                                                                        <td><div class="text-right amounts"> + </div></td>
                                                                        <td><span class="amounts">&#160; <i class="fa fa-usd" aria-hidden="true"></i><span  id="pendingAmount" class="pendingAmount">{{ pendingPaid_add|number_format(2, '.', ',') }}</span></span></td>        
                                                                    </tr>
                                                                    <tr>
                                                                        <td><div class="text-right amounts">Total = </div></td>
                                                                        <td>
                                                                            <span class="amounts">
                                                                                &#160; <i class="fa fa-usd" aria-hidden="true"></i>
                                                                                <span id="boxHtmlTotalAmount_additional" class="">{{ (pendingPaid_add + (rate_add/100)*pendingPaid_add)|number_format(2, '.', ',') }}</span>
                                                                                {% set Balance2 = (pendingPaid_add + (rate_add/100)*pendingPaid_add) %}
                                                                            </span>
                                                                        </td>        
                                                                    </tr>    
                                                                </table>
                                                            </div>
                                                        </div>
                                                    {% endif %}
                                                {% else %}
                                                    <div class="col-lg-6">
                                                        {% set Balance1 = pendingPaid %}
                                                    
                                                        {% if hasBalance is defined and hasBalance|length > 0 %}
                                                            {% set Balance2 = pendingPaid_add %}
                                                        {% else %}
                                                            {% set Balance2 = srv_Loans.getTotalAdditionalAmountsJoinedMainBalance(loan.loaId) %}     
                                                            
                                                            <!-- verifico el ultimo monto adicional fusionado -->
                                                            {% set hasBalance = srv_Loans.getLastAddAmountJoined(loan.loaId) %}
                                                            {% if hasBalance %}
                                                                {# {% set hasBalance = srv_Loans.hasCurrentAdditionalAmount(loan.loaId) %} #}

                                                                {% set loanAdd_Id = hasBalance[0]["laa_id"] %}
                                                                {% set loanAdd_loaRateInterest = hasBalance[0]["laa_rate_interest"] %}
                                                                {% set loandAdd_laaRateInterestByDefault = hasBalance[0]["laa_rate_interest_by_default"] %}
                                                                {% set loandAdd_completed = hasBalance[0]["laa_completed"] %}
                                                                {% set loandAdd_nextPaymentDate = hasBalance[0]["laa_next_payment_date"] %}
                                                                {% set loandAdd_splitted_balance = hasBalance[0]["laa_splitted_balance"] %}


                                                                {# {{ loanAdd_loaRateInterest }} - {{ loandAdd_laaRateInterestByDefault}} - {{ loan.loaRecurringDayPayment }} - {{ loandAdd_nextPaymentDate }} #}
                                                                {% set pending =  srv_Loans.checkDeadLineToPay( loanAdd_loaRateInterest, loandAdd_laaRateInterestByDefault, loan.loaRecurringDayPayment, loandAdd_nextPaymentDate, srv_TimeZone.getNameTimeZone() ) %}
                                                                
                                                                {# {% set pending =  srv_Loans.checkDeadLineToPay( rate, rateByDefault, quotas, deadline, srv_TimeZone.getNameTimeZone() ) %} #}
                                                                {% if pending and loandAdd_splitted_balance == 1 %}        
                                                                    {% set rate = pending.rate  %}  
                                                                    {% set rateByDefault = loanAdd_loaRateInterest %} 
                                                                    {% set deadline = loandAdd_nextPaymentDate %}
                                                                    {% set quotas = pending.quotas %}
                                                                    {% set IsOverDueDate = 1 %}

                                                                    {% set exsistAmountsJoined = true %}
                                                                {% endif %}
                                                            
                                                            
                                                                
                                                            {% endif %}


                                                        {% endif %}
                                                        Balance:<br>
                                                        <div class="well tabInitBalance selectedBalance">
                                                            
                                                            <table>
                                                                <tr>
                                                                    <td>
                                                                        <span class="amounts">
                                                                            <i class="fa fa-usd" aria-hidden="true"></i>
                                                                            <span  id="pendingAmount" class="pendingAmount">{{ (Balance1 + Balance2)|number_format(2, '.', ',') }}</span>
                                                                            x <span class="amounts"><span id="htmlRate">{{rate}}</span>% </span> 
                                                                                                                    
                                                                            = 
                                                                        </span>
                                                                    </td>
                                                                    <td> &#160; <span class="amounts"><i class="fa fa-usd" aria-hidden="true"></i><span id="htmlJustRate">{{ ((rate/100)*(Balance1 + Balance2))|number_format(2, '.', ',') }}</span> </div></td>        
                                                                </tr>
                                                                <tr>
                                                                    <td><div class="text-right amounts"> + </div></td>
                                                                    <td><span class="amounts">&#160; <i class="fa fa-usd" aria-hidden="true"></i><span  id="pendingAmount" class="pendingAmount">{{ (Balance1 + Balance2)|number_format(2, '.', ',') }}</span></span></td>        
                                                                </tr>
                                                                <tr>
                                                                    <td><div class="text-right amounts">Total = </div></td>
                                                                    <td>
                                                                        <span class="amounts">
                                                                            &#160; <i class="fa fa-usd" aria-hidden="true"></i>
                                                                            <span id="boxHtmlTotalAmount" class="">{{ ((Balance1 + Balance2) + (rate/100)*(Balance1 + Balance2))|number_format(2, '.', ',') }}</span>
                                                                            {% set SumBalance1Balance2 = ((Balance1 + Balance2) + (rate/100)*(Balance1 + Balance2)) %}
                                                                            {% set pendingPaid = Balance1 + Balance2 %} <!-- No rate interest -->
                                                                        </span>
                                                                    </td>        
                                                                </tr>    
                                                            </table>
                                                        </div>
                                                    </div>
                                                    
                                                {% endif %}
                                            </div>

                                            <div>
                                                <hr>
                                                <div class="amounts text-center">
                                                    Monto pendiente:  &#160; <i class="fa fa-usd" aria-hidden="true"></i>
                                                    {% if rate_add is defined and rate != rate_add %} {# ==== condition =================================== #}
                                                        <span id="" class="htmlTotalAmount">
                                                            {{ (Balance1 + Balance2)|number_format(2, '.', ',') }} 
                                                            {% set SumBalance1Balance2 = Balance1 + Balance2 %}
                                                        </span>
                                                    {% else %}
                                                        <span id="" class="htmlTotalAmount">
                                                            {{ SumBalance1Balance2|number_format(2, '.', ',') }}
                                                        </span>
                                                    {% endif %}
                                                </div>
                                            </div>



                                            {% if rate_add is defined and rate != rate_add %}
                                            {# Init amounts ===========================================================================================  #}
                                                <input type="hidden" value="{{ pendingPaid }}" id="pendingAmountWithoutRate" name="pendingAmountWithoutRate">
                                                <input type="hidden" value="{{ ((rate/100)*pendingPaid)|number_format(2, '.', ',') }}" id="justRate">

                                                <input type="hidden" value="{{ quotas }}" id="overDueDateQuotas">
                                                <input type="hidden" value="{{ rate }}" id="overDueDateRate" name="overDueDateRate">
                                                <input type="hidden" value="{{ IsOverDueDate  }}" id="IsOverDueDate">


                                                {# additional amounts ===================================================================================== #}
                                                {% if hasBalance %}

                                                    <input type="hidden" value="{{ pendingPaid_add }}" id="pendingAmountWithoutRate_additional" name="pendingAmountWithoutRate_additional">
                                                    <input type="hidden" value="{{ ((rate_add/100)*pendingPaid_add)|number_format(2, '.', ',') }}" id="justRate_additional">

                                                    <input type="hidden" value="{{ quotas_add }}" id="overDueDateQuotas_additional">
                                                    <input type="hidden" value="{{ rate_add }}" id="overDueDateRate_additional" name="overDueDateRate_additional">
                                                    <input type="hidden" value="{{ IsOverDueDate_add  }}" id="IsOverDueDate_additional">
                                                {% endif %}
                                                {# end additional amounts ===================================================================================== #}

                                            {% else %}
                                                    {# Init amounts ===========================================================================================  #}
                                                
                                                    <input type="hidden" value="{{ pendingPaid }}" id="pendingAmountWithoutRate" name="pendingAmountWithoutRate">
                                                    <input type="hidden" value="{{ ((rate/100)*pendingPaid)|number_format(2, '.', ',') }}" id="justRate">

                                                    <input type="hidden" value="{{ quotas }}" id="overDueDateQuotas">
                                                    <input type="hidden" value="{{ rate }}" id="overDueDateRate">
                                                    <input type="hidden" value="{{ IsOverDueDate  }}" id="IsOverDueDate">
                                            {% endif %}
                                            <!-- Fin de tablas de balances############ -->
                                        </div>
                                    </div>
                                {% endif %}
                                <hr>
                            </div>

                            <div class="col-md-12 col-lg-12 col-sm-12">
                                <!-- Nav tabs -->
                                
                                <ul class="nav nav-tabs" role="tablist" id="tabsForm">
                                    {% if rate_add is defined and rate != rate_add %}
                                        <li role="presentation" class="active"><a href="#tabInitBalance" aria-controls="" role="tab" data-toggle="tab">Balance 1 (Inicial)</a></li>
                                        {% if hasBalance %}
                                            <li role="presentation"><a href="#tabAdditional" aria-controls="tabAdditional" role="tab" data-toggle="tab">Balance 2 (Adicional)</a></li>
                                        {% endif %}
                                    {% else %}
                                        <li role="presentation" class="active"><a href="#tabInitBalance" aria-controls="" role="tab" data-toggle="tab">Balance</a></li>
                                    {% endif %}
                                </ul>

                                <!-- Tab panes -->
                                <div class="tab-content">
                                    {% if rate_add is defined and rate != rate_add %}
                                        <div role="tabpanel" class="tab-pane active tab-balance" id="tabInitBalance" style="padding-top:15px">

                                            {{ include("app/loanpayment/_form_init_amount.html.twig",{"foo":""}) }}

                                        </div>
                                        {% if hasBalance %}
                                            <div role="tabpanel" class="tab-pane tab-balance" id="tabAdditional" style="padding-top:15px">

                                                {{ include("app/loanpayment/_form_additional_amount.html.twig",{"foo":""}) }}

                                            </div>
                                        {% endif %}
                                    {% else %}
                                        <div role="tabpanel" class="tab-pane tab-balance active" id="tabInitBalance" style="padding-top:15px">

                                            {{ include("app/loanpayment/_form_init_amount.html.twig",{"foo":""}) }}

                                        </div>
                                    {% endif %}
                                </div>
                            </div>


                            
                            
                            <div id="holderCloseLoanAndNextPayment">
                                <div class="col-md-12 col-lg-12 col-sm-12">
                                    <hr>
                                    {% trans %}payment_rate_date_end_loan{% endtrans %}
                                    <label class="radio-inline">
                                    <input type="radio" name="endLoan" id="otpNo" value="0" checked="checked" required> No
                                    </label>
                                    <label class="radio-inline">
                                    <input type="radio" name="endLoan" id="otpYes" value="1">{% trans %}general_msg_yes{% endtrans %}
                                    </label>
                                    <hr>
                                {# {{ form_widget(form.lpaOptionComplete,  { 'attr': {'class': 'radio-inline',"required":"required"} } ) }} #}
                                </div>
                                
                                <div class="col-md-12 col-lg-12 col-sm-12 holderNextPayment" id="holderNextPayment" >
                                    <div class="panel panel-danger">
                                        <div class="panel-heading"> {% trans %}payment_rate_next_payment_title{% endtrans %}</div>
                                        <div class="panel-body">
                                            <div class="row">
                                                
                                                <div class="col-md-12 col-lg-6 col-sm-12">
                                                    <div class="form-group has-danger">
                                                        <div class="form_error">{{ form_errors(form.loaNextPaymentDate)}}</div>
                                                        <label for="" class=" control-label">{% trans %}payment_rate_next_paymente_date{% endtrans %}: <span class="text-danger">*</span></label>
                                                        <div class="input-group">
                                                            <div class="input-group-addon">
                                                                <i class="fa fa-calendar" aria-hidden="true"></i>
                                                            </div>
                                                
                                                            {% set modify = '+'~ loan.loaRecurringDayPayment ~'day' %}
                                                            {% set nextPay =  loan.loaDeadline|date_modify(modify) | date("Y-m-d") %}
                                                            <div class="">{{ form_widget(form.loaNextPaymentDate,  { 'attr': {'class': 'form-control', "autocomplete":"off", "value":nextPay,  "required":"required",  "disabled":"true"} } ) }}</div>
                                                        </div>
                                                    </div>
                                                </div>
                                                
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            {#
                            <div class="col-md-12 col-lg-12 col-sm-12">
                                <div class="form-group">
                                    <div class="form_error">{{ form_errors(form.lpaNote)}}</div>
                                    <label for="" class=" control-label">{% trans %}loan_form_description{% endtrans %}:</label>
                                    <div class="">{{ form_widget(form.lpaNote,  { 'attr': {'class': 'form-control', 'placeholder':'', "maxlength":"150"} } ) }}</div>
                                    <span id="helpBlock2" class="help-block">{% trans %}loan_form_description_help{% endtrans %}</span>
                                </div>
                            </div>
                            #}
                        </div>
                        <br>
                        <div class="row">
                            <div class="col-lg-12">
                                <div class="form-group">
                                    <ul class="list-inline">
                                        <li>
                                            {{ form_start(form) }}
                                                {{ form_widget(form) }}
                                                <button type="submit" class="btn bg-olive marginBT" id="btnSend" ><i class="fa fa-money" aria-hidden="true"></i> {% trans %}loan_btn_payment{% endtrans %}</button>
                                            {{ form_end(form) }}
                                        </li>
                                        <li>
                                            <a href="{{ path('loan_index') }}" class="btn btn-info marginBT"><i class="fa fa-list" aria-hidden="true"></i> {% trans %}loan_btn_loans_list{% endtrans %}</a>
                                        </li>
                                        <li>
                                            <a href="{{ path('loan_show', { 'loaId': loan.loaId }) }}" class="btn btn-warning marginBT"><i class="fa fa-address-card-o" aria-hidden="true"></i> {% trans %}general_btn_show{% endtrans %}</a>
                                        </li>

                                        <li>
                                            <a href="{{ path('loan_edit', { 'loaId': loan.loaId }) }}" class="btn btn-primary marginBT"><i class="fa fa-pencil-square-o" aria-hidden="true"></i> {% trans %}general_btn_edit{% endtrans %}</a>
                                        </li>
                                        
                                        
                                    </ul>
                                </div>    
                            </div>
                        </div>
                        <hr>
                            <a href="{{ path('gallery_index') }}?loanId={{loan.loaId}}"><i class="fa fa-upload" aria-hidden="true"></i> {% trans %}loan_btn_attach_file{% endtrans %}</a>
                        <hr> 
                    </div>
                </div>
                <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
                     {% if exsistAmountsJoined %}
                        {% set rateByDefault = loanAdd_loaRateInterest %} 
                        {% set deadline = loandAdd_nextPaymentDate %}

                        {{ include('app/loan/_checkPendingQuotas.html.twig', {"rate":rate, "rateByDefault":rateByDefault, "quotas":loan.loaRecurringDayPayment, "deadline":deadline}  )  }}
                     {% else %}
                        {{ include('app/loan/_checkPendingQuotas.html.twig', {"rate":loan.loaRateInterest, "rateByDefault":loan.loaRateInterestByDefault, "quotas":loan.loaRecurringDayPayment, "deadline":loan.loaNextPaymentDate|date('Y-m-d')}  )  }}
                     {% endif %}
                     
                     
                     {% set changedAmount = srv_Loans.checkChangeAmountPerLoan(loan.loaId) %} 
                     {% if changedAmount > 0 %}

                     {% else %}
                        {% set arr =  srv_Loans.getPaymentsByLoandId(loan.loaId) %}
                        {{ include("app/loan/_inputWithRatePayments.html.twig",{"showResume":true}) }}
                     {% endif %}
                </div>

            </div>
               
        {{form_end(form)}}    

    </div>
</div>
{{ include('app/client/_modals.html.twig' )  }}    
{% endblock %}

{% block codejs %}
    <script>
        //$(document).on("ready", function(){
        var newCalc1 = true;
        var newCalc2 = true;   
        
        

        
        $(function (){

            var btnSetManualCalculate = "<label class='control-label'>Proyectar calculos manuales?</label> <span class='btn bg-purple eventSetManualCalculate'><i class='fa fa-hand-o-up' aria-hidden='true'></i> Realizar calculos manules</span>";

            var recalculate = "<label class='control-label'>Proyectar calculos manuales?</label><div class='row'>";
            recalculate += "<div class='col-lg-6'>";
            recalculate += "<span class='btn btn-info btnReCalculateAmounts' id='btnReCalculateAmounts' data-toggle='tooltip' data-placement='top' title='' data-original-title='Re-calcular montos ($)'><i class='fa fa-calculator' aria-hidden='true'></i></span> ";
            recalculate += "<span class='btn btn-default btnGetPercent' id='btnGetPercent' data-toggle='tooltip' data-placement='top' title='' data-original-title='Obtener porcentaje ($)'><i class='fa fa-percent' aria-hidden='true'></i></span>";
            recalculate += "</div>";
            recalculate += "<div class='col-lg-6'>";
            recalculate += "<span class='btn bg-purple eventCancelManualCalculate'><i class='fa fa-times' aria-hidden='true'></i> Cancelar</span>";
            recalculate += "</div>";
            recalculate += "</div>";
            var btnCancelManualCalculate = recalculate

            if( $("#holderResume").length == 1  )
            {
                $("#holderResume").prependTo("#holderPaymentsDone");
            } 

            $("#tabsForm li a").click(function(){
                $(".tabInitBalance, .tabAdditional").removeClass("selectedBalance");
                var href = $(this).attr("href");
                href = href.replace("#", "");
                $("."+href).addClass("selectedBalance");
                //alert(href);
            });

            {% if loan.loaCompleted == 1 %}
                $("input, textarea").prop("disabled", true);
                $("#btnSend, #holderCloseLoanAndNextPayment").remove();
            {% endif %}

            $('#clientslist').DataTable({
                "scrollX": true,
                //'paging'      : true,
                //'lengthChange': false,
                //'searching'   : false,
                //'ordering'    : true,
                //'info'        : true,
                'autoWidth'   : false,
                'dom': 'Bfrtip',
                'buttons': [
                    'copyHtml5',
                    'excelHtml5',
                    'csvHtml5',
                    'pdfHtml5'
                ],
            });

            {% if app.request.getLocale() == "en" %}
                var locale_daterangepicker = {
                    "direction": "ltr",
                    "format": "YYYY-MM-DD",
                    "separator": " - ",
                    "applyLabel": "Apply",
                    "cancelLabel": "Cancel",
                    "fromLabel": "From",
                    "toLabel": "To",
                    "customRangeLabel": "Custom Range",
                    "daysOfWeek": [
                        "Su",
                        "Mo",
                        "Tu",
                        "We",
                        "Th",
                        "Fr",
                        "Sa"
                    ],
                    "monthNames": [
                        "January",
                        "February",
                        "March",
                        "April",
                        "May",
                        "June",
                        "July",
                        "August",
                        "September",
                        "October",
                        "November",
                        "December"
                    ],
                    "firstDay": 1
                };

                var all = "All";
            {% else %}
                var locale_daterangepicker = {
                    "direction": "ltr",
                    "format": "YYYY-MM-DD",
                    "separator": " - ",
                    "applyLabel": "Aplicar",
                    "cancelLabel": "Cancelar",
                    "fromLabel": "DE",
                    "toLabel": "HASTA",
                    "customRangeLabel": "Rango personalizado",
                    "daysOfWeek": [
                        "Dom",
                        "Lun",
                        "Mar",
                        "Mie",
                        "Jue",
                        "Vie",
                        "Sáb"
                    ],
                    "monthNames": [
                        "Enero",
                        "Febrero",
                        "Marzo",
                        "Abril",
                        "Mayo",
                        "Junio",
                        "Julio",
                        "Agosto",
                        "Septiembre",
                        "Octubre",
                        "Noviembre",
                        "Diciembre"
                    ],
                    "firstDay": 1
                };

                var all = "Todo";
            {% endif %}

            $("#appbundle_loanpayment_lpaPaidDate").daterangepicker({
                singleDatePicker: true,
                showDropdowns: true,
                locale: 
                    locale_daterangepicker
                //minYear: 1901,
                //maxYear: parseInt(moment().format('YYYY'),10)
            }, function(start, end, label) {
                //var years = moment().diff(start, 'years');
                //alert("You are " + years + " years old!");
                //setNextPaymentDate();
            });

            $("#appbundle_loanpayment_lpaPaidDate").val("");

            $("#appbundle_loanpayment_loaNextPaymentDate").daterangepicker({
                singleDatePicker: true,
                showDropdowns: true,
                drops:"up",
                locale:
                    locale_daterangepicker
                
                //"autoUpdateInput": false,
            }, function(start, end, label) {
                //var years = moment().diff(start, 'years');
                //alert("You are " + years + " years old!");
            });

            

            $("#appbundle_loanpayment_loaNextPaymentDate").val("");

            /*
                startdate = "2018-10-10";
                var new_date = moment(startdate, "YYYY-mm-dd");
                new_date.add(5, 'days');
                alert(new_date);
            */
            
            $("#appbundle_loanpayment_lpaCurrentRateInterest, #lpaCurrentRateInterest_additional").keyup(function(){

                if( $("#btnCalculateAmounts").is(":visible") )
                {
                    var typePendingAmount = "pendingAmount";
                    var typeHtmlRate = "htmlRate";
                    var typeHtmlJustRate = "htmlJustRate";
                    var typeJustRate     = "justRate";

                    var typeBoxHtmlTotalAmount     = "boxHtmlTotalAmount";

                    var typeOverDueDateRate        = "overDueDateRate";

                    console.log("1");
                }
                else
                {
                    var typePendingAmount = "pendingAmount_additional";
                    var typeHtmlRate = "htmlRate_additional";
                    var typeHtmlJustRate = "htmlJustRate_additional";
                    var typeJustRate     = "justRate";

                    var typeBoxHtmlTotalAmount     = "boxHtmlTotalAmount_additional";

                    var typeOverDueDateRate        = "overDueDateRate_additional";

                    console.log("2");
                }

                var rate = $(this).val();
                var pendingAmount = $("#"+typePendingAmount).text();
                pendingAmount = parseFloat(pendingAmount.replace(",",""));
                rate = ( $.trim(rate) == "" )?0:rate;
                $("#"+typeHtmlRate).html(rate);
                var justRate = ((rate/100)*pendingAmount);
                $("#"+typeJustRate).val(justRate);
                $("#"+typeHtmlJustRate).html( parseFloat(justRate).toFixed(2) );
                var pay = ( pendingAmount + justRate ).toFixed(2);
                $("#"+typeBoxHtmlTotalAmount).html(pay);

                var balance1 = 0.00;
                if( $("#boxHtmlTotalAmount").length > 0 )
                {
                    balance1 = $("#boxHtmlTotalAmount").text();
                    balance1 = parseFloat(balance1.replace(",",""));
                }
                var balance2 = 0.00;
                if( $("#boxHtmlTotalAmount_additional").length > 0 )
                {
                    balance2 = $("#boxHtmlTotalAmount_additional").text();
                    balance2 = parseFloat(balance2.replace(",",""));
                }

                var balanceTotal = ( balance1 + balance2 ).toFixed(2);
                
                $(".htmlTotalAmount").html(balanceTotal);
                

                $("#"+typeOverDueDateRate).val(rate);
            });

            $("#appbundle_loanpayment_lpaTotalAmountPaid").focus();

            $(".btnCalculateAmounts").on("click", function(){
                $(this).blur();
                var d = $.trim($("#appbundle_loanpayment_lpaPaidDate").val());
                if( d == "")
                {
                    alert("{% trans %} payment_rate_msg_fill_when_was_it_paid {% endtrans %}");
                    return false;
                }
                //alert();
                calculateAmounts();
            });


            //$("#appbundle_loanpayment_lpaTotalAmountPaid").focusout(function(){
            function calculateAmounts()
            {    
                

                if( $("#btnCalculateAmounts").is(":visible") )
                {
                    var typeHolderPaymentDetail = "holderPaymentDetail"; 
                    var typeLpaTotalAmountPaid = "appbundle_loanpayment_lpaTotalAmountPaid"; 

                    var inputPaidInterest   = "inputPaidInterest";
                    var inputPaidCapital    = "inputPaidCapital";
                    var inputCompletedRate  = "inputCompletedRate";
                    var inputPendingRate    = "inputPendingRate";
                    var inputLoaNextInterestRate        = "appbundle_loanpayment_loaNextInterestRate";

                    var typePendingAmountWithoutRate    = "pendingAmountWithoutRate";
                    var typeJustRate                    = "justRate";
                    var typeOverDueDateQuotas           = "overDueDateQuotas";
                    var typeOverDueDateRate             = "overDueDateRate";
                    var typeIsOverDueDate               = "IsOverDueDate";

                    var idInputRateByDefault               = "rateByDefault";
                    var idInputRate              = "loaRateInterest";

                    var typeNewBalance = "newBalance";

                    var typeHolderManualCalculate = "holderManualCalculate";

                    var balanceActive = "balance1";
                    console.log("aqui");

                    var holderManual = "holderManualCalculate";
                }
                else
                {
                    var typeHolderPaymentDetail = "holderPaymentDetail_additional"; 
                    var typeLpaTotalAmountPaid = "lpaTotalAmountPaid_additional";

                    var inputPaidInterest   = "inputPaidInterest_additional";
                    var inputPaidCapital    = "inputPaidCapital_additional";
                    var inputCompletedRate  = "inputCompletedRate_additional";
                    var inputPendingRate    = "inputPendingRate_additional";
                    var inputLoaNextInterestRate        = "loaNextInterestRate_additional";

                    var typePendingAmountWithoutRate    = "pendingAmountWithoutRate_additional";
                    var typeJustRate                    = "justRate_additional";
                    var typeOverDueDateQuotas           = "overDueDateQuotas_additional";
                    var typeOverDueDateRate             = "overDueDateRate_additional";
                    var typeIsOverDueDate               = "IsOverDueDate_additional";


                    var idInputRateByDefault               = "rateByDefault_additional";
                    var idInputRate              = "loaRateInterest_additional";

                    var typeNewBalance = "newBalance_additional";

                    var typeHolderManualCalculate = "holderManualCalculate_additional";

                    var balanceActive = "balance2";
                    console.log("2");

                    var holderManual = "holderManualCalculate_additional";
                }
                //alert();
                $("#"+typeHolderPaymentDetail).find(".inputCalculate").each(function(){
                    $(this).attr("readonly", true);
                    //console.log("->");
                });
                //$("#"+typeHolderPaymentDetail+" INextRate").attr("readonly", false);
                //$(".inputCalculate").attr("readonly", true);

                var inputRateByDefault = parseFloat($("#"+idInputRateByDefault).val());

                //Amount to pay ioncluden the interest rate
                var htmlTotalAmount = $("#htmlTotalAmount").text();
                htmlTotalAmount = parseFloat(htmlTotalAmount.replace(",",""));


                var pendingAmountWithoutRate = $("#"+typePendingAmountWithoutRate).val();
                pendingAmountWithoutRate = parseFloat(pendingAmountWithoutRate.replace(",",""));


                var justRate = $("#"+typeJustRate).val();
                justRate = parseFloat(justRate.replace(",",""));
               

                var amountToPay = parseFloat($("#"+typeLpaTotalAmountPaid).val());
                //alert(amountToPay);
                if( !$.isNumeric(amountToPay) || $.trim(amountToPay) <= 0 )
                {
                     

                    $("#"+typeHolderPaymentDetail).hide();
                    $("#"+typeLpaTotalAmountPaid).val("");
                    $("#"+typeLpaTotalAmountPaid).focus();

                    $.alert({
							icon: 'glyphicon glyphicon-exclamation-sign',
							title: 'Error!',
							content: "{% trans %}payment_rate_msg_amount_must_number{% endtrans %}",
							type: 'red',
							typeAnimated: true,
					});
                    
                    return false;
                }

                if( amountToPay > parseFloat( pendingAmountWithoutRate + justRate).toFixed(2) )
                {
                    $("#"+typeHolderPaymentDetail).hide();
                    $("#"+typeLpaTotalAmountPaid).val("");
                    $("#"+typeLpaTotalAmountPaid).focus();
                    //alert(amountToPay +" - "+ (pendingAmountWithoutRate + justRate ) +" / "+  pendingAmountWithoutRate +" / "+ justRate)
                    $.alert({
							icon: 'glyphicon glyphicon-exclamation-sign',
							title: 'Error!',
                            content: "{% trans %}payment_rate_msg_amount_higher{% endtrans %}",
							type: 'red',
							typeAnimated: true,
					});
                    
                    return false;
                }

                var IsOverDueDate = $("#"+typeIsOverDueDate).val();
                var overDueDateQuotas = $("#"+typeOverDueDateQuotas).val();
                var overDueDateRate = $("#"+typeOverDueDateRate).val();
                var resultRatePayment = 0;
                //if( IsOverDueDate == 1 )
                //{
                    var resRate = (overDueDateRate/overDueDateQuotas);
                    var r = 0;
                    var c = 0;
                    var pr = 0;
                    var numQuotanumQuotaPaid = 0;
         
                    
                    //var paidRate = (amountToPay/overDueDateRate);
                    var paidRate = ( (amountToPay/justRate)*( (overDueDateRate/100)*100));
                    var pendingRate = (overDueDateRate - paidRate);

                    paidRate = ( paidRate > overDueDateRate )?overDueDateRate:paidRate;
                    pendingRate = ( pendingRate < 0 )?0:pendingRate;

                    console.log(pendingRate + "-------<");

                    //pendingRate = (pendingRate);
                    c = ( amountToPay <= justRate)?0:(amountToPay-justRate);
                    pr = ( amountToPay > justRate)? justRate : amountToPay;
                    pr = parseFloat(pr);
                    if( c > 0 || ( pr == justRate) )
                    {
                        //$("#"+inputLoaNextInterestRate).val(idInputRate);
                        $("#"+inputLoaNextInterestRate).val(inputRateByDefault);
                        var htmlRate = parseFloat(inputRateByDefault); //"{{loan.loaRateInterestByDefault}}";
                        //alert(inputRateByDefault);
                        console.log("if" + htmlRate);
                    }
                    else
                    {
                        
                        //pendingNextRate = (Number.isInteger(pendingRate))?pendingRate + {{loan.loaRateInterestByDefault}}: ((parseFloat(pendingRate))+({{loan.loaRateInterestByDefault}})).toFixed(2);
                        pendingNextRate = (Number.isInteger(pendingRate))?pendingRate + inputRateByDefault: ((parseFloat(pendingRate))+ parseFloat(inputRateByDefault)).toFixed(2);
                        //pendingNextRate = parseFloat(pendingNextRate);
                        //alert(pendingNextRate);
                        $("#"+inputLoaNextInterestRate).val( pendingNextRate );

                        //alert(typeof( parseFloat(pendingNextRate)) );
                        var htmlRate = $("#"+inputLoaNextInterestRate).val();;
                        //console.log("wwww");
                        //alert(htmlRate);
                        console.log("else");
                    }


                    //startdate = "2018-10-10";
                    var paidDate = $("#appbundle_loanpayment_lpaPaidDate").val();
                    if( $.trim(paidDate) == "" )
                    {
                        alert("{% trans %} payment_rate_msg_fill_when_was_it_paid {% endtrans %}");
                        return false;
                    }
                    else
                    {
                        
                    }
                    

                    console.log("Paid Rate: "+paidRate+"% - Pending rate: "+pendingRate+"% - Capital: "+c+" - paid rate: "+pr);
                   // console.log("Interest: "+paidRate+"% - Quota #: "+numQuotanumQuotaPaid+" - Capital: "+c+" - Rate: "+resultRatePayment);
                    //$("#appbundle_loanpayment_lpaTotalAmountPaid").focus();

                    setNextPaymentDate(pendingRate, inputRateByDefault);
                    paidRate = (Number.isInteger(paidRate))?paidRate: parseFloat(paidRate).toFixed(2);
                    pendingRate = (Number.isInteger(pendingRate))?pendingRate: parseFloat(pendingRate).toFixed(2);
                    $("#"+inputPaidInterest).val(pr.toFixed(2));
                    $("#"+inputPaidCapital).val(c.toFixed(2));
                    $("#"+inputCompletedRate).val(paidRate);
                    $("#"+inputPendingRate).val(pendingRate);

                    //show the new balance
                    //if( c > 0 )
                    //{
                        var a = $("#"+typePendingAmountWithoutRate).val();
                        var DnewAmount = (a - c);//.toFixed(2);
                        var Dnewrate = htmlRate; //$("#appbundle_loanpayment_lpaCurrentRateInterest").val();
                        var calculate = parseFloat(DnewAmount) + parseFloat(DnewAmount * (Dnewrate/100)) ;
                        var iconMoney = '<i class="fa fa-usd" aria-hidden="true"></i>';
                        Dnewrate = (Number.isInteger(Dnewrate))?Dnewrate: parseFloat(Dnewrate).toFixed(2);
                        if( Number.isInteger(Dnewrate) )
                        {
                            Dnewrate = Dnewrate;
                        }
                        else
                        {
                            DnewrateSplit = Dnewrate.split(".");
                            if(DnewrateSplit[1] > 0)
                            {

                            }
                            else
                            {
                                Dnewrate = DnewrateSplit[0];
                            }
                        }


                        var table = "<span class='amounts'><table style=''>";
                        table += "<tr><td>"+iconMoney+DnewAmount.toLocaleString(undefined, {minimumFractionDigits: 2})+"x"+Dnewrate+"% </td><td> = </td><td class='text-left'> &#160;"+iconMoney+(parseFloat(DnewAmount * (Dnewrate/100)).toLocaleString(undefined, {minimumFractionDigits: 2}))+"</td></tr>";
                        table += "<tr><td></td><td ><div class='text-center amounts'> + </div></td><td class='text-left'> &#160;"+iconMoney+(DnewAmount.toLocaleString(undefined, {minimumFractionDigits: 2}))+"</td></tr>";
                        table += "<tr><td ><div class='text-right amounts'>Total </div></td><td> = </td><td class='text-left'> &#160;"+iconMoney+(calculate.toLocaleString(undefined, {minimumFractionDigits: 2}))+"</td></tr>";
                        table += "</table></span>";

                         if( $("#btnCalculateAmounts").is(":visible") )
                         {
                             if( calculate == 0 )
                             {
                                newCalc1 = false;
                             }else{
                                newCalc1 = true;
                             }
                             
                         }else{
                             if( calculate == 0 )
                             {
                                newCalc2 = false;
                             }else{
                                newCalc2 = true;
                             }
                         }
                        

                        //if( calculate == 0 )
                        if( newCalc1 == false && newCalc2 == false )
                        {
                            $( "#otpYes" ).prop( "checked", true );
                            //$("#holderNextPayment").hide();
                            
                        }
                        if( amountToPay == parseFloat( pendingAmountWithoutRate + justRate).toFixed(2) ){
                      
                            if( $(".tab-balance").length == 1  )
                            {
                                //alert("iguales");  
                                $( "#otpYes" ).prop( "checked", true );
                            }
                        }
                        else{

                             $( "#otpNo" ).prop( "checked", true );
                            //$("#holderNextPayment").show();
                        }

                        checkRadioEndLoan();

                   // }
                    
                    $("#"+typeNewBalance).html(table);
                    $("."+typeHolderManualCalculate).html(btnSetManualCalculate);

                    //alert(btnSetmanualCalculate);

                    $("#"+balanceActive).val(1);

                    $("#"+holderManual).show();
                //}

                
                //console.log(amount);
            }

            $("body").on("click",".eventSetManualCalculate", function(){
                $(this).closest(".tab-balance").find("input[type='text']").attr("readonly",false);
                //alert(btnCancelManualCalculate);
                if( $("#btnCalculateAmounts").is(":visible") )
                {
                    var holderManualCalculate = "holderManualCalculate"; 
                    
                }
                else
                {
                    var holderManualCalculate = "holderManualCalculate_additional"; 
                }
                //alert( holderManualCalculate );
                //console.log( holderManualCalculate );
                //$(this).closest(".tab-balance").find("#"+holderManualCalculate).html(btnCancelManualCalculate);
                $("#"+holderManualCalculate).html(btnCancelManualCalculate);
            });

            $("body").on("click",".eventCancelManualCalculate", function(){
                //alert();
                $(this).closest(".tab-balance").find(".balance").val("");
                $(this).closest(".tab-balance").find(".mainHolderPayments").hide();
                $(this).closest(".tab-balance").find(".holderManualCalculate").hide();

                
                
                $(this).closest(".tab-balance").find(".inputCalculate").each(function(){
                    $(this).val("");
                    $(this).attr("readonly",true);
                }); 
            });

            $("body").on("click","#btnReCalculateAmounts", function(){
                //mainHolderPayments
                var id = $(this).closest(".tab-balance").find(".mainHolderPayments").attr("id");

                var holder = $(this).closest(".tab-balance").find(".detailBalance");

                if( id == "holderPaymentDetail" )
                {
                    var pendingCapital = $("#pendingAmountWithoutRate").val();
                    //var rate = $("#rateByDefault").val();
                    var capitalToPay = $("#inputPaidCapital").val();

                    var nextRate = $("#appbundle_loanpayment_loaNextInterestRate").val();

                    
                }else{
                    var pendingCapital = $("#pendingAmountWithoutRate_additional").val();
                    //var rate = $("#rateByDefault_additional").val();
                    var capitalToPay = $("#inputPaidCapital_additional").val();

                    var nextRate = $("#loaNextInterestRate_additional").val();
                }

                var rate = nextRate;

                var nextCapital = (parseFloat(pendingCapital) - parseFloat(capitalToPay));
                var rateWithCapital = parseFloat(nextCapital * (rate/100));

                var iconMoney = '<i class="fa fa-usd" aria-hidden="true"></i>';

                var table = "<span class='amounts text-left'><table style=''>";
                table += "<tr><td>"+iconMoney+nextCapital.toLocaleString(undefined, {minimumFractionDigits: 2})+"x"+rate+"% =</td><td>&#160; "+iconMoney+rateWithCapital.toLocaleString(undefined, {minimumFractionDigits: 2})+"</td></tr>";
                table += "<tr><td ><div class='text-right amounts'> + </div></td><td> &#160; "+iconMoney+nextCapital.toLocaleString(undefined, {minimumFractionDigits: 2})+"</td></tr>";
                table += "<tr><td ><div class='text-right amounts'>Total = </div></td><td>&#160; "+iconMoney+(parseFloat(nextCapital)+parseFloat(rateWithCapital)).toLocaleString(undefined, {minimumFractionDigits: 2})+"</td></tr>";
                table += "</table></span>";
                holder.html(table);

                //var n = 125232;
                //var s = n.toLocaleString(undefined, {minimumFractionDigits: 2});
                //alert(s);
            });

            $("body").on("click", ".btnGetPercent", function(){
                var id = $(this).closest(".tab-balance").find(".mainHolderPayments").attr("id");
                if( id == "holderPaymentDetail" )
                {
                    var pendingCapital = $("#pendingAmountWithoutRate").val();

                    
                }else{
                    var pendingCapital = $("#pendingAmountWithoutRate_additional").val();
                }

                $("#pCapital").val(pendingCapital);
                $("#pInterestToPay").val("");
                $("#pAditionalAmount").val("");
                $("#pResultAmount").val(0);
                $("#holderResultPercent").empty("");

                $('#myModalPercent').modal({backdrop: 'static', keyboard: false}) 

            });

            $("#btnShowPercent").on("click", function(){
                var capital = parseFloat($("#pCapital").val());
                var interest = $("#pInterestToPay").val();
                var amount = $("#pAditionalAmount").val();
                if( capital < 0 || capital == "" )
                {
                    alert("El capital a pagar no puede ser nulo");
                    $("#pCapital").focus();
                    return false;
                }
                
                //alert(interest);    
                if( interest < 0 || interest == "" )
                {
                    alert("Ingrese el monto de interes a pagar");
                    $("#pInterestToPay").focus();
                    return false;
                }

                if( amount < 0  || amount == "" )
                {
                    alert("Ingrese el Monto adicional recivido");
                    $("#pAditionalAmount").focus();
                    return false;
                }

                var amount = (interest - amount);

                var result = ((amount/capital)*100).toLocaleString(undefined, {minimumFractionDigits: 2});
                var html = "El porcentaje obtenido del capital $"+capital.toLocaleString(undefined, {minimumFractionDigits: 2});
                html +=  " con respecto al monto "+amount.toLocaleString(undefined, {minimumFractionDigits: 2})+ " es: ";
                html += "<span class='amounts'>"+result+" <i class='fa fa-percent' aria-hidden='true'></i> </span>";
                $("#holderResultPercent").html("<p>"+html+"</p>");
            });

             $("#pInterestToPay, #pAditionalAmount").keyup(function(){
                var interest = $("#pInterestToPay").val();
                if( interest <= 0 )
                {
                    interest = 0;
                }

                var amount = $("#pAditionalAmount").val();

                if( amount <= 0 )
                {
                    amount = 0;
                }

                $("#pResultAmount").val( interest - amount );
             });



            $("#inputPaidCapital, #inputPaidCapital_additional, #inputPaidInterest, #inputPaidInterest_additional").keyup(function(){
                var id = $(this).closest(".tab-balance").find(".mainHolderPayments").attr("id");

                //var amount = $(this).val();
                if( id == "holderPaymentDetail" )
                {
                    var inpRate = $("#inputPaidInterest").val();
                    var inpCapital = $("#inputPaidCapital").val();
                }
                else
                {
                    var inpRate = $("#inputPaidInterest_additional").val();
                    var inpCapital = $("#inputPaidCapital_additional").val();
                }

                
                $(this).closest(".tab-balance").find(".inputAmountToPay").val( parseFloat(inpCapital) + parseFloat(inpRate));
            });



            $('input[name="endLoan"]').on('change', function() {
                checkRadioEndLoan();
            })
            function checkRadioEndLoan()
            {
               // $('input[name="endLoan"]').on('change', function() {
                    var radioValue = $('input[name="endLoan"]:checked').val();   
                    if( radioValue == 1 )
                    {
                        $(".holderNextPayment").hide();
                    }else{
                        $(".holderNextPayment").show();
                    }    
                    //alert(radioValue); 
                // });
                
            }

            $("#appbundle_loanpayment_lpaPaidDate").focusout(function(){
                
            });
            function setNextPaymentDate(pendingRate, inputRateByDefault)
            {

                if( $("#btnCalculateAmounts").is(":visible") )
                {
                    var typeHolderPaymentDetail = "holderPaymentDetail"; 
                    var typeLpaTotalAmountPaid = "appbundle_loanpayment_lpaTotalAmountPaid"; 
                    var typeLoaNextInterestRate = "appbundle_loanpayment_loaNextInterestRate"; 
                    //console.log("aqui");
                }
                else
                {
                    var typeHolderPaymentDetail = "holderPaymentDetail_additional"; 
                    var typeLpaTotalAmountPaid = "lpaTotalAmountPaid_additional";
                    var typeLoaNextInterestRate = "loaNextInterestRate_additional"; 
                    //console.log("2");
                }

                if( $("#pendingNextDeadlineToPaid").length == 1 ||  pendingRate > 0)
                {
                    if ( $("#pendingNextDeadlineToPaid").length == 1 )
                    {
                        nextDate = $("#pendingNextDeadlineToPaid").text();
                    }
                    else
                    {
                        nextDate = $("#appbundle_loanpayment_lpaMaxPaymentDate").val();
                    }
                     
                    var paidDate = $("#appbundle_loanpayment_lpaPaidDate").val();
                    if( paidDate == "" )
                    {
                        alert("{% trans %} payment_rate_msg_fill_when_was_it_paid {% endtrans %}");
                        return false;
                    }
                    else
                    {
                        if ( paidDate <  nextDate && pendingRate > 0 )
                        {
                            var per = nextDate;//moment(nextDate, 'YYYY-MM-DD').add(+{{ loan.loaRecurringDayPayment }}, 'days').format('YYYY-MM-DD'); 
                            //console.log("xxxxx"+pendingRate);
                        }
                        else
                        {
                            //Next period
                            var per = moment(nextDate, 'YYYY-MM-DD').add(+{{ loan.loaRecurringDayPayment }}, 'days').format('YYYY-MM-DD'); 
                            var rate = parseFloat("{{ loan.loaRateInterest }}");
                            var newNextRate = pendingRate + rate; 
                            if( !isInt(newNextRate) )
                            {
                                newNextRate = parseFloat(pendingRate + rate).toFixed(2);
                            }
                            //$("#"+typeLoaNextInterestRate).val( newNextRate );
                            //console.log("--------"+pendingRate);
                            //alert(newNextRate + "bbbbbbbbbbb"); //-----------------------------------
                        }
                    }
                   // console.log("if");
                }
                else
                {
                    //$("#"+typeLoaNextInterestRate).val( inputRateByDefault );
                    nextDate = $("#appbundle_loanpayment_lpaMaxPaymentDate").val();
                    //console.log("else");
                    var per = moment(nextDate, 'YYYY-MM-DD').add(+{{ loan.loaRecurringDayPayment }}, 'days').format('YYYY-MM-DD'); 

                    //alert(inputRateByDefault + "aaaaaaaaa"); //-----------------------------------
                }

                
                //alert(per);
                //console.log("nextDate: "+nextDate+" - {{ loan.loaRecurringDayPayment }}");
                $("#appbundle_loanpayment_loaNextPaymentDate").val(per);

                $("#"+typeLoaNextInterestRate).attr("readonly", false);
                $("#appbundle_loanpayment_loaNextPaymentDate").attr("disabled", false);
                $("#"+typeHolderPaymentDetail).show();

            }

            //Comprueba si es entero 
            function isInt(value) {
                var er = /^-?[0-9]+$/;
                return er.test(value);
            }
            /*
                var inputPaid = $("#alreadyPaidAmount");
                var iniPaid = inputPaid.text();

                var inputPending = $("#pendingAmount");
                var iniPending = inputPending.text();
                $("#appbundle_loanpayment_lpaCurrentAmount").keyup(function(){
                    var amount = $(this).val();
                    var amount = parseFloat(amount);
                    
                    if( amount > 0 )
                    {
                        var paid = parseFloat(iniPaid);
                        var pending = parseFloat(iniPending);
                        //console.log(paid);
                        var txtPaid = (paid + amount).toFixed(2);
                        var txtPending = (pending - amount).toFixed(2);
                    }
                    else
                    {
                        var txtPaid = iniPaid;
                        var txtPending = iniPending;
                    }

                    
                    inputPaid.html(txtPaid.replace(/\B(?=(\d{3})+(?!\d))/g, ","));
                    inputPending.html(txtPending.replace(/\B(?=(\d{3})+(?!\d))/g, ","));
                    
                });
            */
            $("#appbundle_loanpayment_lpaTotalAmountPaid, #lpaTotalAmountPaid_additional").keyup(function(){

                if( $("#btnCalculateAmounts").is(":visible") )
                {
                    var typeHolderPaymentDetail = "holderPaymentDetail"; 
                    //var typeLoaNextInterestRate = "appbundle_loanpayment_loaNextPaymentDate"; 
                    var typeLoaNextInterestRate = "appbundle_loanpayment_loaNextInterestRate";
                    
                    //console.log("aqui");
                }
                else
                {
                    var typeHolderPaymentDetail = "holderPaymentDetail_additional"; 
                    var typeLoaNextInterestRate = "loaNextInterestRate_additional"; 

                    //var typeLoaNextInterestRate = "appbundle_loanpayment_loaNextPaymentDate";
                    //console.log("2");
                } 

                if( $.trim($(this).val()) <= 0 )
                {
                    $("#"+typeHolderPaymentDetail).hide();
                    $("#"+typeHolderPaymentDetail).find("input").val("");
                    $("#"+typeHolderPaymentDetail).find("#newBalance").empty();
                    $("#"+typeLoaNextInterestRate).val("");
                    $("#"+typeLoaNextInterestRate).attr("readonly",true);
                    
                    var b1 = $("#balance1").val();
                    var b2 = $("#balance2").val();
                    if( b1 != 1 && b2 != 1)
                    {
                        $("#appbundle_loanpayment_loaNextPaymentDate").val("");
                        $("#appbundle_loanpayment_loaNextPaymentDate").attr("disabled",true);
                    }
                }
            });

            function clearData()
            {

            }

            $("form[name='appbundle_loanpayment']").submit(function(){

                if( $("#btnCalculateAmounts").is(":visible") )
                {
                    //var typeHolderPaymentDetail = "holderPaymentDetail"; 
                    var typeLpaTotalAmountPaid = "appbundle_loanpayment_lpaTotalAmountPaid"; 
                    //var typeLoaNextInterestRate = "appbundle_loanpayment_loaNextPaymentDate"; 

                    var PaidInterest = "inputPaidInterest";
                    var PaidCapital = "inputPaidCapital";
                    //console.log("aqui");
                }
                else
                {
                    //var typeHolderPaymentDetail = "holderPaymentDetail_additional"; 
                    var typeLpaTotalAmountPaid = "lpaTotalAmountPaid_additional";
                    //var typeLoaNextInterestRate = "loaNextInterestRate_additional"; 
                    //console.log("2");
                    var PaidInterest = "inputPaidInterest_additional";
                    var PaidCapital = "inputPaidCapital_additional";
                }    

                 var amount = $("#"+typeLpaTotalAmountPaid).val();

                
                 //alert(amount);
                if( $("#appbundle_loanpayment_loaNextPaymentDate").prop('disabled') || $.trim(amount) <= 0 )
                {
                    
                    $.alert({
							icon: 'glyphicon glyphicon-exclamation-sign',
							title: 'Error!',
							//content: 'Press <i class="fa fa-calculator" aria-hidden="true"></i> to get the amounts and the next payment date.</span>',
                            content: "{{ ('payment_rate_msg_amount_must_number'|trans())|raw }}",
							type: 'red',
							typeAnimated: true,
					});

                    
                    return false;
                }

                var validAmountInterest = $("#"+PaidInterest).val();
                var validAmountCapital = $("#"+PaidCapital).val();

                if( validAmountInterest <= 0 && validAmountCapital <= 0)
                {
                    $.alert({
							icon: 'glyphicon glyphicon-exclamation-sign',
							title: 'Error!',
							//content: 'Press <i class="fa fa-calculator" aria-hidden="true"></i> to get the amounts and the next payment date.</span>',
                            content: "{{ ('payment_rate_msg_amount_rate_and_capital'|trans())|raw }}",
							type: 'red',
							typeAnimated: true,
					});
                    return false;
                }

                //return false;
                $("#holder_loading").show();
            });

            $("body").on("click",".btnShowClient",function(event){
                event.preventDefault();
                var id = $(this).attr("href");
                showClient(id);
            });

            function showClient(id) {
                var id = id;
                var routeShow = "{{ path('client_show', { 'cliId': 'PLACEHOLDER'}) }}";
                routeShow = routeShow.replace("PLACEHOLDER", id);
				$("#holder_loading").show();
				$.ajax({
						type: "POST",
						url: routeShow,
						data: { id:id},
						error: function (data) {
							$("#holder_loading").hide();
							$.confirm({
								icon: 'fa fa-remove',
								title: 'Error!',
								content: "{{ ('general_msg_send_data'|trans())|raw }}",
								type: 'red',
								typeAnimated: true,
								buttons: {
									tryAgain: {
										text: 'Try again',
										btnClass: 'btn-red',
										action: function () {
											showClient(id);
										}
									},
									close: function () {
									}
								}
							});

						},
						success: function (data) {

							if (data != "")
							{

								//$('form[name$=appbundle_paciente]')[0].reset();
								//var routeShow = " {# {{ path('perfil_show') }} #}" //routeShow.replace("PLACEHOLDER", data);
								//window.location.assign(routeShow);
								$('#modalShowClient').modal({backdrop: 'static', keyboard: false});
                                $("#holderBodyModal").html(data);

                                var href = "{{ path('client_edit', { 'cliId': 'PLACEHOLDER' }) }}";
                                href = href.replace("PLACEHOLDER", id);    
                                $("body").find("#btnModalEditClient").attr("href", href);
                                $("body").find("#btnModalLoanClient").val(id);
        

                                $("#holder_loading").hide();
                                /*
                                $.alert({
                                    icon: 'fa fa-address-card-o',
                                    title: 'Client',
                                    type: "green",
                                    content: 'Full information'+data,
                                });
                                */
							} else
							{
								$("#holder_loading").hide();
								var infoError = (data);
								$.alert({
									icon: 'glyphicon glyphicon-exclamation-sign',
									title: 'Info!',
									content: "{{ ('general_msg_send_data'|trans())|raw }}" + infoError,
									type: 'blue',
									typeAnimated: true,
								});
							}
						}
					});
            } 

            $('#tablePayments').DataTable({
                //"scrollX": true,
                'paging'      : false,
                'lengthChange': false,
                'searching'   : true,
                "scrollCollapse": true,
                "scrollY": 400,
                "scrollX": true
                //'ordering'    : true,
                //'info'        : true,
                //'autoWidth'   : false,
                //'dom': 'Bfrtip',
                //'dom': 'Blfrtip',
                /*
                'buttons': [
                    'copyHtml5',
                    'excelHtml5',
                    'csvHtml5',
                    'pdfHtml5'
                ],
                */
            });

        });
    </script>    
{% endblock %}
